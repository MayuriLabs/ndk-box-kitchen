From 44e37b453c66bc0287a481cd8bec67cf5e4bf0ff Mon Sep 17 00:00:00 2001
From: topjohnwu <topjohnwu@gmail.com>
Date: Fri, 7 Feb 2020 14:32:06 -0800
Subject: [PATCH] Add runtime toggle to enable standalone ash


diff --git a/shell/ash.c b/shell/ash.c
index a022b17c4..a9389a7b5 100644
--- a/shell/ash.c
+++ b/shell/ash.c
@@ -291,16 +291,14 @@ typedef long arith_t;
 #endif
 
 #include "NUM_APPLETS.h"
-#if NUM_APPLETS == 1
-/* STANDALONE does not make sense, and won't compile */
-# undef CONFIG_FEATURE_SH_STANDALONE
-# undef ENABLE_FEATURE_SH_STANDALONE
-# undef IF_FEATURE_SH_STANDALONE
-# undef IF_NOT_FEATURE_SH_STANDALONE
-# define ENABLE_FEATURE_SH_STANDALONE 0
-# define IF_FEATURE_SH_STANDALONE(...)
-# define IF_NOT_FEATURE_SH_STANDALONE(...) __VA_ARGS__
-#endif
+
+/* Magisk: Force enable standalone mode as it can be toggled at runtime */
+#undef ENABLE_FEATURE_SH_STANDALONE
+#undef IF_FEATURE_SH_STANDALONE
+#undef IF_NOT_FEATURE_SH_STANDALONE
+#define ENABLE_FEATURE_SH_STANDALONE 1
+#define IF_FEATURE_SH_STANDALONE(...) __VA_ARGS__
+#define IF_NOT_FEATURE_SH_STANDALONE(...)
 
 #ifndef F_DUPFD_CLOEXEC
 # define F_DUPFD_CLOEXEC F_DUPFD
@@ -356,7 +354,9 @@ static const char *const optletters_optnames[] ALIGN_PTR = {
 	"b"   "notify",
 	"u"   "nounset",
 	"E"   "errtrace",
-	"\0"  "vi"
+	"\0"  "vi",
+/* Magisk: toggle whether use standalone shell mode */
+	"\0"  "standalone"
 #if BASH_PIPEFAIL
 	,"\0"  "pipefail"
 #endif
@@ -513,14 +513,15 @@ struct globals_misc {
 #define uflag optlist[13]
 #define Eflag optlist[14]
 #define viflag optlist[15]
+#define saflag optlist[16]
 #if BASH_PIPEFAIL
-# define pipefail optlist[16]
+# define pipefail optlist[17]
 #else
 # define pipefail 0
 #endif
 #if DEBUG
-# define nolog optlist[16 + BASH_PIPEFAIL]
-# define debug optlist[17 + BASH_PIPEFAIL]
+# define nolog optlist[17 + BASH_PIPEFAIL]
+# define debug optlist[18 + BASH_PIPEFAIL]
 #endif
 
 	/* trap handler commands */
@@ -8415,7 +8416,7 @@ static void
 tryexec(IF_FEATURE_SH_STANDALONE(int applet_no,) const char *cmd, char **argv, char **envp)
 {
 #if ENABLE_FEATURE_SH_STANDALONE
-	if (applet_no >= 0) {
+	if (saflag && applet_no >= 0) {
 		if (!vforked && APPLET_IS_NOEXEC(applet_no)) {
 			clearenv();
 			while (*envp)
@@ -8483,7 +8484,7 @@ static void shellexec(char *prog, char **argv, const char *path, int idx)
 	envp = listvars(VEXPORT, VUNSET, /*strlist:*/ NULL, /*end:*/ NULL);
 	if (strchr(prog, '/') != NULL
 #if ENABLE_FEATURE_SH_STANDALONE
-	 || (applet_no = find_applet_by_name(prog)) >= 0
+	 || (saflag && (applet_no = find_applet_by_name(prog)) >= 0)
 #endif
 	) {
 		tryexec(IF_FEATURE_SH_STANDALONE(applet_no,) prog, argv, envp);
@@ -14050,7 +14051,7 @@ find_command(char *name, struct cmdentry *entry, int act, const char *path)
 		goto fail;
 
 #if ENABLE_FEATURE_SH_STANDALONE
-	{
+	if (saflag) {
 		int applet_no = find_applet_by_name(name);
 		if (applet_no >= 0) {
 			entry->cmdtype = CMDNORMAL;
@@ -14271,7 +14272,7 @@ helpcmd(int argc UNUSED_PARAM, char **argv UNUSED_PARAM)
 		}
 	}
 # if ENABLE_FEATURE_SH_STANDALONE
-	{
+	if (saflag) {
 		const char *a = applet_names;
 		while (*a) {
 			col += out1fmt("%c%s", ((col == 0) ? '\t' : ' '), a);
@@ -14953,6 +14954,11 @@ int ash_main(int argc UNUSED_PARAM, char **argv)
 	TRACE(("Shell args: "));
 	trace_puts_args(argv);
 #endif
+ 
+	char *ash_sa = getenv("ASH_STANDALONE");
+	if (ash_sa && strcmp(ash_sa, "1") == 0)
+		/* Magisk: toggle standalone shell with environment ASH_STANDALONE */
+		saflag = 1;
 
 	if (login_sh) {
 		const char *hp;
-- 
2.50.1

