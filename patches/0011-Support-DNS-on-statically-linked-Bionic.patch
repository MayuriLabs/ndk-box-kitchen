From 366ec6f618a961915dae7cf0ae4215148925f2e9 Mon Sep 17 00:00:00 2001
From: topjohnwu <topjohnwu@gmail.com>
Date: Mon, 15 Jul 2024 17:20:17 -0700
Subject: [PATCH] Support DNS on statically linked Bionic


diff --git a/include/bionic_resolv.h b/include/bionic_resolv.h
new file mode 100644
index 000000000..a15cb587b
--- /dev/null
+++ b/include/bionic_resolv.h
@@ -0,0 +1,112 @@
+#pragma once
+
+// Struct/function definitions copied from headers in bionic/libc/dns
+
+#include <resolv.h>
+#include <net/if.h>
+
+/* Hard-coded defines */
+#define MAXNS			4	/* max # name servers we'll track */
+#define MAXDNSRCH		6	/* max # domains in search path */
+#define MAXDNSRCHPATH		256	/* max length of domain search paths */
+#define MAXNSSAMPLES		64	/* max # samples to store per server */
+#define	MAXRESOLVSORT		10	/* number of net to sort on */
+#define	MAXALIASES	35
+#define	MAXADDRS	35
+
+// These are function pointers
+typedef void* res_send_rhook;
+typedef void* res_send_qhook;
+
+struct res_static {
+  char* h_addr_ptrs[MAXADDRS + 1];
+  char* host_aliases[MAXALIASES];
+  char hostbuf[8 * 1024];
+  u_int32_t host_addr[16 / sizeof(u_int32_t)]; /* IPv4 or IPv6 */
+  FILE* hostf;
+  int stayopen;
+  const char* servent_ptr;
+  struct servent servent;
+  struct hostent host;
+};
+
+union res_sockaddr_union {
+	struct sockaddr_in	sin;
+#ifdef IN6ADDR_ANY_INIT
+	struct sockaddr_in6	sin6;
+#endif
+#ifdef ISC_ALIGN64
+	int64_t			__align64;	/* 64bit alignment */
+#else
+	int32_t			__align32;	/* 32bit alignment */
+#endif
+	char			__space[128];   /* max size */
+};
+
+struct __res_state_ext {
+	union res_sockaddr_union nsaddrs[MAXNS];
+	struct sort_list {
+		int     af;
+		union {
+			struct in_addr  ina;
+			struct in6_addr in6a;
+		} addr, mask;
+	} sort_list[MAXRESOLVSORT];
+	char nsuffix[64];
+	char nsuffix2[64];
+};
+
+struct __res_state {
+	unsigned	netid;			/* NetId: cache key and socket mark */
+	int	retrans;	 	/* retransmission time interval */
+	int	retry;			/* number of times to retransmit */
+#ifdef sun
+	u_int	options;		/* option flags - see below. */
+#else
+	u_long	options;		/* option flags - see below. */
+#endif
+	int	nscount;		/* number of name servers */
+	struct sockaddr_in
+		nsaddr_list[MAXNS];	/* address of name server */
+#define	nsaddr	nsaddr_list[0]		/* for backward compatibility */
+	u_short	id;			/* current message id */
+	char	*dnsrch[MAXDNSRCH+1];	/* components of domain to search */
+	char	defdname[256];		/* default domain (deprecated) */
+#ifdef sun
+	u_int	pfcode;			/* RES_PRF_ flags - see below. */
+#else
+	u_long	pfcode;			/* RES_PRF_ flags - see below. */
+#endif
+	unsigned ndots:4;		/* threshold for initial abs. query */
+	unsigned nsort:4;		/* number of elements in sort_list[] */
+	char	unused[3];
+	struct {
+		struct in_addr	addr;
+		uint32_t	mask;
+	} sort_list[MAXRESOLVSORT];
+#ifdef __OLD_RES_STATE
+	char lookups[4];
+#else
+	res_send_qhook qhook;		/* query hook */
+	res_send_rhook rhook;		/* response hook */
+	int	res_h_errno;		/* last one set for this context */
+	unsigned _mark;			/* If non-0 SET_MARK to _mark on all request sockets */
+	int	_vcsock;		/* PRIVATE: for res_send VC i/o */
+	u_int	_flags;			/* PRIVATE: see below */
+	u_int	_pad;			/* make _u 64 bit aligned */
+	union {
+		/* On an 32-bit arch this means 512b total. */
+		char	pad[72 - 4*sizeof (int) - 2*sizeof (void *)];
+		struct {
+			uint16_t		nscount;
+			uint16_t		nstimes[MAXNS];	/* ms. */
+			int			nssocks[MAXNS];
+			struct __res_state_ext *ext;	/* extention for IPv6 */
+		} _ext;
+	} _u;
+#endif
+        struct res_static   rstatic[1];
+};
+
+extern struct __res_state *__res_get_state(void);
+#define _res (*__res_get_state())
diff --git a/include/libbb.h b/include/libbb.h
index 4b3319824..7457820f4 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -840,6 +840,8 @@ char* xmalloc_sockaddr2dotted_noport(const struct sockaddr *sa) FAST_FUNC RETURN
 struct hostent *xgethostbyname(const char *name) FAST_FUNC;
 // Also mount.c and inetd.c are using gethostbyname(),
 // + inet_common.c has additional IPv4-only stuff
+/* Set the dns server in the global _res nameserver structure */
+void set_default_dns(const char *server);
 
 
 struct tls_aes {
diff --git a/libbb/wrap_funcs.c b/libbb/wrap_funcs.c
index e6a13667f..24b7e7f23 100644
--- a/libbb/wrap_funcs.c
+++ b/libbb/wrap_funcs.c
@@ -36,6 +36,9 @@
 #include <unistd.h>
 #include <fcntl.h>
 
+#include "libbb.h"
+#include "bionic_resolv.h"
+
 char * __wrap_realpath(const char * __restrict path, char * __restrict resolved)
 {
     struct stat sb;
@@ -233,3 +236,11 @@ int __wrap_renameat(int old_dir_fd, const char *old_path, int new_dir_fd, const
 int __wrap_rename(const char *old_path, const char *new_path) {
     return __wrap_renameat(AT_FDCWD, old_path, AT_FDCWD, new_path);
 }
+
+extern typeof(getaddrinfo) __real_getaddrinfo;
+
+int __wrap_getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res) {
+    // Statically linked bionic does not have a global DNS, need to set it
+    set_default_dns(NULL);
+    return __real_getaddrinfo(node, service, hints, res);
+}
diff --git a/libbb/xconnect.c b/libbb/xconnect.c
index 0e0b247b8..d444fa577 100644
--- a/libbb/xconnect.c
+++ b/libbb/xconnect.c
@@ -15,6 +15,7 @@
 # include <linux/netlink.h>
 #endif
 #include "libbb.h"
+#include "bionic_resolv.h"
 
 int FAST_FUNC setsockopt_int(int fd, int level, int optname, int optval)
 {
@@ -539,3 +540,39 @@ char* FAST_FUNC xmalloc_sockaddr2dotted_noport(const struct sockaddr *sa)
 {
 	return sockaddr2str(sa, NI_NUMERICHOST | NI_NUMERICSCOPE | IGNORE_PORT);
 }
+
+void set_default_dns(const char *server)
+{
+	static bool has_set_default_dns = false;
+	len_and_sockaddr *lsa;
+
+	// Set a fallback DNS server
+	if (!server) {
+		if (!has_set_default_dns) {
+			server = "8.8.8.8";
+		} else {
+			return;
+		}
+	}
+
+	has_set_default_dns = true;
+
+	/* NB: this works even with, say, "[::1]:5353"! :) */
+	lsa = xhost2sockaddr(server, 53);
+
+	if (lsa->u.sa.sa_family == AF_INET) {
+		_res.nscount = 1;
+		/* struct copy */
+		_res.nsaddr_list[0] = lsa->u.sin;
+	}
+#if ENABLE_FEATURE_IPV6
+	if (lsa->u.sa.sa_family == AF_INET6) {
+		_res.nscount = 1;
+		_res._u._ext.nscount = 1;
+		/* struct copy */
+		_res._u._ext.ext->nsaddrs[0].sin6 = lsa->u.sin6;
+		_res.nsaddr_list[0].sin_family = 0;
+	}
+#endif
+	free(lsa);
+}
diff --git a/networking/nslookup.c b/networking/nslookup.c
index b67d354f7..e9be265ca 100644
--- a/networking/nslookup.c
+++ b/networking/nslookup.c
@@ -41,6 +41,9 @@
 //#include <netdb.h>
 #include "libbb.h"
 #include "common_bufsiz.h"
+#ifdef __BIONIC__
+#include "bionic_resolv.h"
+#endif
 
 /*
  * Mini nslookup implementation for busybox
@@ -146,7 +149,8 @@ static void server_print(void)
 	struct sockaddr *sa;
 
 #if ENABLE_FEATURE_IPV6
-	sa = (struct sockaddr*)_res._u._ext.nsaddrs[0];
+	if (_res._u._ext.nscount)
+		sa = (struct sockaddr*)&_res._u._ext.ext->nsaddrs[0].sin6;
 	if (!sa)
 #endif
 		sa = (struct sockaddr*)&_res.nsaddr_list[0];
@@ -158,6 +162,7 @@ static void server_print(void)
 	bb_putchar('\n');
 }
 
+#if 0
 /* alter the global _res nameserver structure to use
    an explicit dns server instead of what is in /etc/resolv.conf */
 static void set_default_dns(const char *server)
@@ -165,7 +170,7 @@ static void set_default_dns(const char *server)
 	len_and_sockaddr *lsa;
 
 	if (!server)
-		return;
+		server = "8.8.8.8";
 
 	/* NB: this works even with, say, "[::1]:5353"! :) */
 	lsa = xhost2sockaddr(server, 53);
@@ -176,21 +181,17 @@ static void set_default_dns(const char *server)
 		_res.nsaddr_list[0] = lsa->u.sin;
 	}
 #if ENABLE_FEATURE_IPV6
-	/* Hoped libc can cope with IPv4 address there too.
-	 * No such luck, glibc 2.4 segfaults even with IPv6,
-	 * maybe I misunderstand how to make glibc use IPv6 addr?
-	 * (uclibc 0.9.31+ should work) */
 	if (lsa->u.sa.sa_family == AF_INET6) {
-		// glibc neither SEGVs nor sends any dgrams with this
-		// (strace shows no socket ops):
-		//_res.nscount = 0;
+		_res.nscount = 1;
 		_res._u._ext.nscount = 1;
-		/* store a pointer to part of malloc'ed lsa */
-		_res._u._ext.nsaddrs[0] = &lsa->u.sin6;
-		/* must not free(lsa)! */
+		/* struct copy */
+		_res._u._ext.ext->nsaddrs[0].sin6 = lsa->u.sin6;
+		_res.nsaddr_list[0].sin_family = 0;
 	}
 #endif
+    free(lsa);
 }
+#endif
 
 int nslookup_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int nslookup_main(int argc, char **argv)
@@ -203,9 +204,6 @@ int nslookup_main(int argc, char **argv)
 	if (!argv[1] || argv[1][0] == '-' || argc > 3)
 		bb_show_usage();
 
-	/* initialize DNS structure _res used in printing the default
-	 * name server and in the explicit name server option feature. */
-	res_init();
 	/* rfc2133 says this enables IPv6 lookups */
 	/* (but it also says "may be enabled in /etc/resolv.conf") */
 	/*_res.options |= RES_USE_INET6;*/
-- 
2.50.1

